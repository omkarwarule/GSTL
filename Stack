#include<iostream>
using namespace std;
//structure for stack
template<class T>
struct stack
{
    T data;
    struct stack* next;
};
//class for stack
template <class T>
class MyStack
{
    private:
        struct stack<T> *first;
        int icount;
    public:
        MyStack();
        ~MyStack();
        
        void Push(T);
        int Pop();
        int Count();
        void Display();
    
};
template <class T>
MyStack<T>::MyStack()
{
    first=NULL;
    icount=0;
}
template <class T>
void MyStack<T>::Push(T ino)
{
    struct stack<T>* newn;
    struct stack<T>* temp=first;
    newn=new stack<T>;
    newn->data=ino;
    newn->next=NULL;
    if(first==NULL)
    {
        first=newn;
    }
    else
    {
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newn;
    }
    icount++;
}
template <class T>
int MyStack<T>::Pop()
{
    int value=0;
    struct stack<T>* temp=first;
    if(first==NULL)
    {
        cout<<"stack is already empty"<<endl;
        return -1;
    }
    else
    if(first->next==NULL)
    {
        delete first;
        first=NULL;
    }else
    {
        while(temp->next->next!=NULL)
        {
            temp=temp->next;
        }
        value=temp->next->data;
        delete temp->next;
        temp->next=NULL;
    }
    icount--;
    return value;
}
template <class T>
void MyStack<T>::Display()
{
    struct stack<T>* temp=first;
    for(int i=1;i<=icount;i++)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
template <class T>
int MyStack<T>::Count()
{
    int icount=0;
    struct stack<T>* temp=first;
    for(int i=1;i<=icount;i++)
    {
        icount++;
        temp=temp->next;
    }
    return icount;
}
template <class T>
MyStack<T>::~MyStack()
{
    delete first;
}
